import { getProDetails } from "../apis/SummaryOneAPI";

// helper to update server
const updateUserProDetails = async (obj) => {
  try {
    const { data } = await getProDetails.put(obj);
    console.log("Updated:", data);
  } catch (err) {
    console.error("Update failed", err);
  }
};

// thunk action creators (no args needed when dispatching)
export const incrementAiReport = () => (dispatch, getState) => {
  const newValue = getState().counter.counterAiReport + 1;

  // update localStorage
  localStorage.setItem("counterAiReport", newValue);

  // update API
  updateUserProDetails({ counter_ai_report: newValue });

  // dispatch pure action
  dispatch({
    type: "SET_COUNTERS",
    payload: {
      counterAiReport: newValue,
      counterApiInteraction: getState().counter.counterApiInteraction,
    },
  });
};

export const incrementApiInteraction = () => (dispatch, getState) => {
  const newValue = getState().counter.counterApiInteraction + 1;

  localStorage.setItem("counterApiInteraction", newValue);
  updateUserProDetails({ counter_interactions: newValue });

  dispatch({
    type: "SET_COUNTERS",
    payload: {
      counterAiReport: getState().counter.counterAiReport,
      counterApiInteraction: newValue,
    },
  });
};

// set counters directly (still no args when dispatching unless you pass values)
export const setCounters = () => (dispatch) => {
  const counterAiReport = Number(localStorage.getItem("counterAiReport")) || 0;
  const counterApiInteraction = Number(localStorage.getItem("counterApiInteraction")) || 0;

  dispatch({
    type: "SET_COUNTERS",
    payload: { counterAiReport, counterApiInteraction },
  });
};
