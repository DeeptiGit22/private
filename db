Fixed version (Pure reducer + side effects in actions)
// counterReducer.js
const initialState = {
  counterAiReport: Number(localStorage.getItem("counterAiReport")) || 0,
  counterApiInteraction: Number(localStorage.getItem("counterApiInteraction")) || 0,
};

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case "INCREMENT_AI_REPORT":
      return {
        ...state,
        counterAiReport: state.counterAiReport + 1,
      };

    case "INCREMENT_API_INTERACTION":
      return {
        ...state,
        counterApiInteraction: state.counterApiInteraction + 1,
      };

    case "SET_COUNTERS":
      return {
        ...state,
        counterAiReport: action.payload.counterAiReport,
        counterApiInteraction: action.payload.counterApiInteraction,
      };

    default:
      return state;
  }
};

export default counterReducer;

âœ… Move side effects into action creators
import { getProDetails } from "../apis/SummaryOneAPI";

// helper to update server
const updateUserProDetails = async (obj) => {
  try {
    const { data } = await getProDetails.put(obj);
    console.log("Updated:", data);
  } catch (err) {
    console.error("Update failed", err);
  }
};

export const incrementAiReport = () => (dispatch, getState) => {
  const newValue = getState().counter.counterAiReport + 1;

  // update localStorage
  localStorage.setItem("counterAiReport", newValue);

  // update API
  updateUserProDetails({ counter_ai_report: newValue });

  dispatch({ type: "INCREMENT_AI_REPORT" });
};

export const incrementApiInteraction = () => (dispatch, getState) => {
  const newValue = getState().counter.counterApiInteraction + 1;

  localStorage.setItem("counterApiInteraction", newValue);
  updateUserProDetails({ counter_interactions: newValue });

  dispatch({ type: "INCREMENT_API_INTERACTION" });
};

export const setCounters = (payload) => (dispatch) => {
  localStorage.setItem("counterAiReport", payload.counterAiReport);
  localStorage.setItem("counterApiInteraction", payload.counterApiInteraction);

  dispatch({ type: "SET_COUNTERS", payload });
};
